{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAY/B,SAAS,OAAO,CAAC,GAAG;IAClB,OAAO,GAAG;SACP,UAAU,CAAC,SAAS,EAAE;QACrB,QAAQ,EAAE,iFAAiF;QAC3F,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,CAAC;KACT,CAAC;SACD,OAAO,CAAC;QACP,MAAM,EAAE;YACN,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI;SAClC;QACD,MAAM,EAAE;YACN,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,mDAAmD;YAC7D,IAAI,EAAE,SAAS;SAChB;QACD,aAAa,EAAE;YACb,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,2IAA2I;YACrJ,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,IAAI;SACd;QACD,QAAQ,EAAE;YACR,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,0CAA0C;YACpD,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,IAAI;SAClB;QACD,QAAQ,EAAE;YACR,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,+FAA+F;YACzG,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,QAAQ;YACjB,MAAM,CAAC,GAAG;gBACR,MAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;oBACrB,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;oBAChD,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;iBAC5C;gBACD,OAAO,OAAO,CAAC;YACjB,CAAC;SACF;QACD,iBAAiB,EAAE;YACjB,QAAQ,EAAE,iEAAiE;YAC3E,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,QAAQ;YACjB,MAAM,CAAC,GAAG;gBACR,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;YAC3C,CAAC;SACF;KACF,CAAC;SACD,MAAM,CAAC,MAAM,CAAC;SACd,MAAM,EAAE,CAAC;AACd,CAAC;AAED,SAAgB,QAAQ,CAAC,SAAqC;IAC5D,KAAK;SACF,KAAK,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC;SAC3C,IAAI,CAAC,GAAG,CAAC;SACT,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC;SAClB,IAAI,CAAC;IAER,SAAS,OAAO,CAAC,IAAI;QACnB,SAAS,CAAC;YACR,QAAQ,EAAE,IAAI,CAAC,OAAO;YACtB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC;YAC/B,UAAU,EAAE,IAAI,CAAC,IAAI;YACrB,SAAS,EAAE,IAAI,CAAC,MAAM;YACtB,OAAO,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE;YAC1B,cAAc,EAAE,IAAI,CAAC,cAAc,IAAI,EAAE;SAC1C,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAlBD,4BAkBC;AAED,MAAM,MAAM,GAAG;;;;;;;;;;yCAU0B,CAAC","sourcesContent":["import * as yargs from 'yargs';\n\ntype Options = {\n  fileName: string | undefined;\n  port: number;\n  corsOrigin: string | true;\n  openEditor: boolean;\n  extendURL: string | undefined;\n  headers: { [key: string]: string };\n  forwardHeaders: [string];\n}\n\nfunction builder(cmd) {\n  return cmd\n    .positional('SDLFile', {\n      describe: 'path to file with SDL. If this argument is omitted Faker uses default file name',\n      type: 'string',\n      nargs: 1,\n    })\n    .options({\n      'port': {\n        alias: 'p',\n        describe: 'HTTP Port',\n        type: 'number',\n        requiresArg: true,\n        default: process.env.PORT || 9002,\n      },\n      'open': {\n        alias: 'o',\n        describe: 'Open page with SDL editor and GraphiQL in browser',\n        type: 'boolean',\n      },\n      'cors-origin': {\n        alias: 'co',\n        describe: 'CORS: Specify the custom origin for the Access-Control-Allow-Origin header, by default it is the same as `Origin` header from the request',\n        type: 'string',\n        requiresArg: true,\n        default: true,\n      },\n      'extend': {\n        alias: 'e',\n        describe: 'URL to existing GraphQL server to extend',\n        type: 'string',\n        requiresArg: true,\n      },\n      'header': {\n        alias: 'H',\n        describe: 'Specify headers to the proxied server in cURL format, e.g.: \"Authorization: bearer XXXXXXXXX\"',\n        array: true,\n        type: 'string',\n        requiresArg: true,\n        implies: 'extend',\n        coerce(arr) {\n          const headers = {};\n          for (const str of arr) {\n            const [, name, value] = str.match(/(.*?):(.*)/);\n            headers[name.toLowerCase()] = value.trim();\n          }\n          return headers;\n        },\n      },\n      'forward-headers': {\n        describe: 'Specify which headers should be forwarded to the proxied server',\n        array: true,\n        type: 'string',\n        implies: 'extend',\n        coerce(arr) {\n          return arr.map(str => str.toLowerCase());\n        },\n      },\n    })\n    .epilog(epilog)\n    .strict();\n}\n\nexport function parseCLI(commandCB: (options: Options) => void) {\n  yargs\n    .usage('$0 [SDLFile]', '', builder, handler)\n    .help('h')\n    .alias('h', 'help')\n    .argv;\n\n  function handler(argv) {\n    commandCB({\n      fileName: argv.SDLFile,\n      port: argv.port,\n      corsOrigin: argv['cors-origin'],\n      openEditor: argv.open,\n      extendURL: argv.extend,\n      headers: argv.header || {},\n      forwardHeaders: argv.forwardHeaders || [],\n    });\n  }\n}\n\nconst epilog = `Examples:\n\n# Mock GraphQL API based on example SDL and open interactive editor\n$0 --open\n\n# Extend real data from SWAPI with faked data based on extension SDL\n$0 ./ext-swapi.grqphql --extend http://swapi.apis.guru/\n\n# Extend real data from GitHub API with faked data based on extension SDL\n$0 ./ext-gh.graphql --extend https://api.github.com/graphql \\\\\n--header \"Authorization: bearer <TOKEN>\"`;\n"]}